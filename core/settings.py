"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-9!xkknqg2)%y!liiwvy9i_o*za%qitsl!7*mk-406&ihc)p$pr"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

BASE_DOMAIN = "localhost" # The base domain for the application, used for tenant routing
PUBLIC_SCHEMA_NAME = "public" # The schema name for the public tenant
AUTH_USER_MODEL = "tenants.User" # The custom user model for the application
TENANT_MODEL = "tenants.Tenant" # The model representing tenants in the application
TENANT_DOMAIN_MODEL = "tenants.Domain" # The model representing tenant domains in the application 

# Application definition
# apps that live in public schema and are acessible to all tenants
SHARED_APPS = [
    "django_tenants",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "tenants.apps.TenantsConfig",
    "blog.apps.BlogConfig",
]
# apps specific to each tenant and live in their own schema
TENANT_APPS = [
    "tasks.apps.TasksConfig",
]
# django-tenants uses INSTALLED_APPS to sync models to the correct schema during migrations
INSTALLED_APPS = list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]

MIDDLEWARE = [
    # * This middleware ensures that the proper database schema is selected based on the request host
    # * Additionally, it injects the tenant instance into the request, so that it can be accessed directly in the views
    "django_tenants.middleware.main.TenantMainMiddleware", # tenant middleware must be first
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",  # Use the PostgreSQL backend for multi-tenancy
        "NAME": "quickie",
        "USER": "quickie",
        "PASSWORD": "password123",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

# Database configuration for the tenant schema 
# * This router will ensure that the public and tenant-only apps are synced correctly to the database
# * when splitting the database into public and tenant schemas; splitting INSTALLED_APPS into TENANT_APPS and SHARED_APPS
DATABASE_ROUTERS = [
    "django_tenants.routers.TenantSyncRouter",
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
